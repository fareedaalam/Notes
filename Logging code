To configure Serilog to use a SQL Server database for logging in a .NET Core 6 application and utilize configuration from the `appsettings.json` file, you can follow these steps:

1. **Install Serilog Packages:**

   First, install the necessary Serilog packages for SQL Server logging and configuration from NuGet:

   ```
   dotnet add package Serilog
   dotnet add package Serilog.Extensions.Logging
   dotnet add package Serilog.Sinks.MSSqlServer
   dotnet add package Microsoft.Extensions.Configuration.Json
   ```

2. **Create `appsettings.json` File:**

   Create or update your `appsettings.json` file to include the Serilog configuration for SQL Server. Here's an example configuration:

   ```json
   {
     "Logging": {
       "LogLevel": {
         "Default": "Information"
       },
       "Serilog": {
         "Using": [ "Serilog.Sinks.MSSqlServer" ],
         "MinimumLevel": {
           "Default": "Information",
           "Override": {
             "Microsoft": "Warning",
             "System": "Warning"
           }
         },
         "WriteTo": [
           {
             "Name": "MSSqlServer",
             "Args": {
               "connectionString": "YourConnectionStringHere",
               "tableName": "Logs",
               "autoCreateSqlTable": true
             }
           }
         ]
       }
     }
   }
   ```

   Replace `"YourConnectionStringHere"` with your SQL Server connection string.

3. **Configure Serilog in `Program.cs`:**

   In your `Program.cs` file, configure Serilog to use the settings from `appsettings.json`:

   ```csharp
   using Microsoft.Extensions.Configuration;
   using Microsoft.Extensions.DependencyInjection;
   using Microsoft.Extensions.Hosting;
   using Serilog;

   public class Program
   {
       public static void Main(string[] args)
       {
           var configuration = new ConfigurationBuilder()
               .AddJsonFile("appsettings.json")
               .Build();

           Log.Logger = new LoggerConfiguration()
               .ReadFrom.Configuration(configuration) // Read Serilog configuration from appsettings.json
               .CreateLogger();

           CreateHostBuilder(args).Build().Run();
       }

       public static IHostBuilder CreateHostBuilder(string[] args) =>
           Host.CreateDefaultBuilder(args)
               .ConfigureServices((hostContext, services) =>
               {
                   services.AddHostedService<Worker>();
               })
               .UseSerilog(); // Use Serilog for logging
   }
   ```

4. **Use Serilog for Logging:**

   You can now use Serilog for logging in your application as usual. For example:

   ```csharp
   using Microsoft.Extensions.Logging;
   using System;

   public class Worker : BackgroundService
   {
       private readonly ILogger<Worker> _logger;

       public Worker(ILogger<Worker> logger)
       {
           _logger = logger;
       }

       protected override async Task ExecuteAsync(CancellationToken stoppingToken)
       {
           while (!stoppingToken.IsCancellationRequested)
           {
               _logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now);
               await Task.Delay(1000, stoppingToken);
           }
       }
   }
   ```

5. **Run Your Application:**

   Build and run your .NET Core 6 application. Serilog will use the SQL Server sink and configuration from `appsettings.json` to log messages to the specified database table.

This setup allows you to manage your logging configuration in the `appsettings.json` file and use SQL Server as the log storage backend. You can further customize the Serilog configuration in `appsettings.json` to suit your specific requirements.
