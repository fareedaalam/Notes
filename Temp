public class JsonPropertyTypeHandler<T> : SqlMapper.TypeHandler<T>
{
    private readonly SqlMapper.ITypeHandler innerHandler;

    public JsonPropertyTypeHandler()
    {
        this.innerHandler = SqlMapper.GetTypeHandler(typeof(T));
    }

    public override T Parse(object value)
    {
        if (value is string json)
        {
            var jsonObject = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
            var data = new Dictionary<string, object>();

            foreach (var kvp in jsonObject)
            {
                var propertyName = typeof(T).GetProperty(kvp.Key)?.Name ?? kvp.Key;
                data.Add(propertyName, kvp.Value);
            }

            return (T)this.innerHandler.Parse(data);
        }

        return (T)this.innerHandler.Parse(value);
    }

    public override void SetValue(IDbDataParameter parameter, T value)
    {
        this.innerHandler.SetValue(parameter, value);
    }
}
/===========
public override User Parse(object value)
    {
        if (value is string json)
        {
            var dictionary = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
            var user = new User();

            foreach (var kvp in dictionary)
            {
                var property = typeof(User).GetProperty(kvp.Key);

                if (property != null && property.CanWrite)
                {
                    property.SetValue(user, kvp.Value);
                }
            }

            return user;
        }

        throw new ArgumentException("Value must be a JSON string.");
    }

    public override void SetValue(IDbDataParameter parameter, User value)
    {
        parameter.Value = JsonConvert.SerializeObject(value);
    }
